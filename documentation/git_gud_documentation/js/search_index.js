var search_data = {"index":{"searchIndex":["applicationcontroller","applicationhelper","applicationrecord","availabilitiescontroller","availabilitieshelper","availability","datetime","event","eventscontroller","eventshelper","user","availability_params()","available_participants()","check_format()","check_format()","check_possible_times()","compact_times_allowed()","compact_times_available()","create()","create()","date_cannot_be_in_the_past()","destroy()","destroy()","edit()","edit()","ensure_times_allowed_has_correct_date()","event_params()","hour_12()","hour_24()","index()","index()","is_available_at_event_and_time?()","must_choose_at_least_one_time()","must_choose_at_least_one_time()","name_cannot_be_empty()","new()","new()","reformat_time()","show()","show()","update()","update()"],"longSearchIndex":["applicationcontroller","applicationhelper","applicationrecord","availabilitiescontroller","availabilitieshelper","availability","datetime","event","eventscontroller","eventshelper","user","availabilitiescontroller#availability_params()","eventshelper#available_participants()","availabilitiescontroller#check_format()","eventscontroller#check_format()","eventscontroller#check_possible_times()","event#compact_times_allowed()","availability#compact_times_available()","availabilitiescontroller#create()","eventscontroller#create()","event#date_cannot_be_in_the_past()","availabilitiescontroller#destroy()","eventscontroller#destroy()","availabilitiescontroller#edit()","eventscontroller#edit()","event#ensure_times_allowed_has_correct_date()","eventscontroller#event_params()","datetime#hour_12()","datetime#hour_24()","availabilitiescontroller#index()","eventscontroller#index()","user#is_available_at_event_and_time?()","availability#must_choose_at_least_one_time()","event#must_choose_at_least_one_time()","event#name_cannot_be_empty()","availabilitiescontroller#new()","eventscontroller#new()","applicationcontroller#reformat_time()","availabilitiescontroller#show()","eventscontroller#show()","availabilitiescontroller#update()","eventscontroller#update()"],"info":[["ApplicationController","","classes/ApplicationController.html","",""],["ApplicationHelper","","classes/ApplicationHelper.html","",""],["ApplicationRecord","","classes/ApplicationRecord.html","",""],["AvailabilitiesController","","classes/AvailabilitiesController.html","",""],["AvailabilitiesHelper","","classes/AvailabilitiesHelper.html","",""],["Availability","","classes/Availability.html","",""],["DateTime","","classes/DateTime.html","",""],["Event","","classes/Event.html","",""],["EventsController","","classes/EventsController.html","",""],["EventsHelper","","classes/EventsHelper.html","",""],["User","","classes/User.html","",""],["availability_params","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-availability_params","()",""],["available_participants","EventsHelper","classes/EventsHelper.html#method-i-available_participants","(participants,event,time)","<p>Get a list of the participants available for a specified event at a\nspecified time. PRE: all param objects …\n"],["check_format","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-check_format","()",""],["check_format","EventsController","classes/EventsController.html#method-i-check_format","()","<p>Define a variable with the current hour format setting. If none is set,\ndefault to 12. PRE: None POST: …\n"],["check_possible_times","EventsController","classes/EventsController.html#method-i-check_possible_times","()","<p>PRE: None POST: None\n"],["compact_times_allowed","Event","classes/Event.html#method-i-compact_times_allowed","()","<p>Delete all nil values from times_allowed array using ruby&#39;s compact\nmethod. PRE: None POST: Nil values …\n"],["compact_times_available","Availability","classes/Availability.html#method-i-compact_times_available","()","<p>Delete all nil values from times_available array using ruby&#39;s compact\nmethod. PRE: times_available …\n"],["create","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-create","()","<p>Creates and stores a new availability, associated with a given event, in\nthe database PRE: None POST: …\n"],["create","EventsController","classes/EventsController.html#method-i-create","()","<p>Define what to do when creating a new event PRE: None POST: A new event is\ncreated, or an error message …\n"],["date_cannot_be_in_the_past","Event","classes/Event.html#method-i-date_cannot_be_in_the_past","()","<p>Verifies event date is not before today PRE: date exists POST: If date is\nearlier than today, add an …\n"],["destroy","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-destroy","()","<p>Destroys an availability PRE: The availability exists POST: The\navailability is removed from the database …\n"],["destroy","EventsController","classes/EventsController.html#method-i-destroy","()","<p>Find and destroy an event. Redirect to events#index. PRE: The event with\nthe specific id exists POST: …\n"],["edit","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-edit","()","<p>Redirects to a page to edit an availability PRE: The availability exists\nPOST: None\n"],["edit","EventsController","classes/EventsController.html#method-i-edit","()","<p>Find event object to update and store possible_times in a var. PRE: None\nPOST: None\n"],["ensure_times_allowed_has_correct_date","Event","classes/Event.html#method-i-ensure_times_allowed_has_correct_date","()","<p>When we created the times, we used today to generate the intervals.  This\nchanges the date of the datetime …\n"],["event_params","EventsController","classes/EventsController.html#method-i-event_params","()","<p>Define the permitted params for creating a new event PRE: None POST: None\n"],["hour_12","DateTime","classes/DateTime.html#method-i-hour_12","()","<p>PRE: None POST: None\n"],["hour_24","DateTime","classes/DateTime.html#method-i-hour_24","()","<p>PRE: None POST: None\n"],["index","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-index","()","<p>Simply redirects back to home page. Required since refreshing after a\nfailed validation will bring you …\n"],["index","EventsController","classes/EventsController.html#method-i-index","()","<p>Create an instance var of all of the events for use in the events#index\npage PRE: None POST: None\n"],["is_available_at_event_and_time?","User","classes/User.html#method-i-is_available_at_event_and_time-3F","(event,time)","<p>Check to see if a user said they were available for a specified event at a\nspecified time. PRE: None …\n"],["must_choose_at_least_one_time","Availability","classes/Availability.html#method-i-must_choose_at_least_one_time","()","<p>Make sure at least one available time is selected. PRE: times_available\nexists POST: if times_available …\n"],["must_choose_at_least_one_time","Event","classes/Event.html#method-i-must_choose_at_least_one_time","()","<p>Ensures that at least one time is chosen for the event PRE: times_allowed\nexists POST: If times_allowed …\n"],["name_cannot_be_empty","Event","classes/Event.html#method-i-name_cannot_be_empty","()","<p>Ensures the name field is not empty PRE: name exists POST: If name is\nblank, add an error to errors hash. …\n"],["new","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-new","()","<p>Redirects to a page for creation of an availability PRE: None POST: None\n"],["new","EventsController","classes/EventsController.html#method-i-new","()","<p>Create an instance var for a new event for the events#new pages PRE: None\nPOST: An event object is created …\n"],["reformat_time","ApplicationController","classes/ApplicationController.html#method-i-reformat_time","()","<p>Toggle the hour format to the opposite of what it was, then reload current\npage. PRE: None POST: Time …\n"],["show","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-show","()","<p>Redirects to a page showing the availability PRE: None POST: None\n"],["show","EventsController","classes/EventsController.html#method-i-show","()","<p>Create an instance var of the event with the specified id for the\nevents#show page PRE: None POST: None …\n"],["update","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-update","()","<p>Edits a given availability PRE: The availability exists POST: Changes are\nmade to the availability in …\n"],["update","EventsController","classes/EventsController.html#method-i-update","()","<p>Define what to do when trying to update an event. PRE: The event with the\nspecific id exists POST: Event …\n"]]}}