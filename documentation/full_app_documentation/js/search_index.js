var search_data = {"index":{"searchIndex":["activerecord","activesupport","testcase","adduseridtoevents","alteringtimesallowedtodatetimeineventsandavailabilities","applicationcable","channel","connection","applicationcontroller","applicationhelper","applicationjob","applicationmailer","applicationrecord","applicationsystemtestcase","availabilitiescontroller","availabilitiescontrollertest","availabilitieshelper","availability","bundler","createavailabilities","createevents","datetime","devisecreateusers","event","eventscontroller","eventshelper","logger","object","simplifyvariablesinevents","skeddit","application","user","availability_params()","available_participants()","change()","change()","change()","change()","change()","change()","check_format()","check_format()","check_possible_times()","compact_times_allowed()","compact_times_available()","create()","create()","date_cannot_be_in_the_past()","destroy()","destroy()","edit()","edit()","ensure_times_allowed_has_correct_date()","event_params()","hour_12()","hour_24()","index()","index()","is_available_at_event_and_time?()","must_choose_at_least_one_time()","must_choose_at_least_one_time()","name_cannot_be_empty()","new()","new()","reformat_time()","show()","show()","system!()","update()","update()","gemfile","gemfile.lock","readme","rakefile","manifest.js","application.js","availabilities.coffee","cable.js","events.coffee","application.scss","availabilities.scss","events.scss","config.ru","development.log","package.json","404.html","422.html","500.html","apple-touch-icon-precomposed.png","apple-touch-icon.png","robots","server.pid","restart"],"longSearchIndex":["activerecord","activesupport","activesupport::testcase","adduseridtoevents","alteringtimesallowedtodatetimeineventsandavailabilities","applicationcable","applicationcable::channel","applicationcable::connection","applicationcontroller","applicationhelper","applicationjob","applicationmailer","applicationrecord","applicationsystemtestcase","availabilitiescontroller","availabilitiescontrollertest","availabilitieshelper","availability","bundler","createavailabilities","createevents","datetime","devisecreateusers","event","eventscontroller","eventshelper","logger","object","simplifyvariablesinevents","skeddit","skeddit::application","user","availabilitiescontroller#availability_params()","eventshelper#available_participants()","adduseridtoevents#change()","alteringtimesallowedtodatetimeineventsandavailabilities#change()","createavailabilities#change()","createevents#change()","devisecreateusers#change()","simplifyvariablesinevents#change()","availabilitiescontroller#check_format()","eventscontroller#check_format()","eventscontroller#check_possible_times()","event#compact_times_allowed()","availability#compact_times_available()","availabilitiescontroller#create()","eventscontroller#create()","event#date_cannot_be_in_the_past()","availabilitiescontroller#destroy()","eventscontroller#destroy()","availabilitiescontroller#edit()","eventscontroller#edit()","event#ensure_times_allowed_has_correct_date()","eventscontroller#event_params()","datetime#hour_12()","datetime#hour_24()","availabilitiescontroller#index()","eventscontroller#index()","user#is_available_at_event_and_time?()","availability#must_choose_at_least_one_time()","event#must_choose_at_least_one_time()","event#name_cannot_be_empty()","availabilitiescontroller#new()","eventscontroller#new()","applicationcontroller#reformat_time()","availabilitiescontroller#show()","eventscontroller#show()","object#system!()","availabilitiescontroller#update()","eventscontroller#update()","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["ActiveRecord","","classes/ActiveRecord.html","",""],["ActiveSupport","","classes/ActiveSupport.html","",""],["ActiveSupport::TestCase","","classes/ActiveSupport/TestCase.html","",""],["AddUserIdToEvents","","classes/AddUserIdToEvents.html","",""],["AlteringTimesAllowedToDateTimeInEventsAndAvailabilities","","classes/AlteringTimesAllowedToDateTimeInEventsAndAvailabilities.html","",""],["ApplicationCable","","classes/ApplicationCable.html","",""],["ApplicationCable::Channel","","classes/ApplicationCable/Channel.html","",""],["ApplicationCable::Connection","","classes/ApplicationCable/Connection.html","",""],["ApplicationController","","classes/ApplicationController.html","",""],["ApplicationHelper","","classes/ApplicationHelper.html","",""],["ApplicationJob","","classes/ApplicationJob.html","",""],["ApplicationMailer","","classes/ApplicationMailer.html","",""],["ApplicationRecord","","classes/ApplicationRecord.html","",""],["ApplicationSystemTestCase","","classes/ApplicationSystemTestCase.html","",""],["AvailabilitiesController","","classes/AvailabilitiesController.html","",""],["AvailabilitiesControllerTest","","classes/AvailabilitiesControllerTest.html","",""],["AvailabilitiesHelper","","classes/AvailabilitiesHelper.html","",""],["Availability","","classes/Availability.html","",""],["Bundler","","classes/Bundler.html","",""],["CreateAvailabilities","","classes/CreateAvailabilities.html","",""],["CreateEvents","","classes/CreateEvents.html","",""],["DateTime","","classes/DateTime.html","",""],["DeviseCreateUsers","","classes/DeviseCreateUsers.html","",""],["Event","","classes/Event.html","",""],["EventsController","","classes/EventsController.html","",""],["EventsHelper","","classes/EventsHelper.html","",""],["Logger","","classes/Logger.html","",""],["Object","","classes/Object.html","",""],["SimplifyVariablesInEvents","","classes/SimplifyVariablesInEvents.html","",""],["Skeddit","","classes/Skeddit.html","",""],["Skeddit::Application","","classes/Skeddit/Application.html","",""],["User","","classes/User.html","",""],["availability_params","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-availability_params","()",""],["available_participants","EventsHelper","classes/EventsHelper.html#method-i-available_participants","(participants,event,time)","<p>Get a list of the participants available for a specified event at a\nspecified time. PRE: all param objects …\n"],["change","AddUserIdToEvents","classes/AddUserIdToEvents.html#method-i-change","()",""],["change","AlteringTimesAllowedToDateTimeInEventsAndAvailabilities","classes/AlteringTimesAllowedToDateTimeInEventsAndAvailabilities.html#method-i-change","()",""],["change","CreateAvailabilities","classes/CreateAvailabilities.html#method-i-change","()",""],["change","CreateEvents","classes/CreateEvents.html#method-i-change","()",""],["change","DeviseCreateUsers","classes/DeviseCreateUsers.html#method-i-change","()",""],["change","SimplifyVariablesInEvents","classes/SimplifyVariablesInEvents.html#method-i-change","()",""],["check_format","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-check_format","()",""],["check_format","EventsController","classes/EventsController.html#method-i-check_format","()","<p>Define a variable with the current hour format setting. If none is set,\ndefault to 12. PRE: None POST: …\n"],["check_possible_times","EventsController","classes/EventsController.html#method-i-check_possible_times","()","<p>PRE: None POST: None\n"],["compact_times_allowed","Event","classes/Event.html#method-i-compact_times_allowed","()","<p>Delete all nil values from times_allowed array using ruby&#39;s compact\nmethod. PRE: None POST: Nil values …\n"],["compact_times_available","Availability","classes/Availability.html#method-i-compact_times_available","()","<p>Delete all nil values from times_available array using ruby&#39;s compact\nmethod. PRE: times_available …\n"],["create","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-create","()","<p>Creates and stores a new availability, associated with a given event, in\nthe database PRE: None POST: …\n"],["create","EventsController","classes/EventsController.html#method-i-create","()","<p>Define what to do when creating a new event PRE: None POST: A new event is\ncreated, or an error message …\n"],["date_cannot_be_in_the_past","Event","classes/Event.html#method-i-date_cannot_be_in_the_past","()","<p>Verifies event date is not before today PRE: date exists POST: If date is\nearlier than today, add an …\n"],["destroy","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-destroy","()","<p>Destroys an availability PRE: The availability exists POST: The\navailability is removed from the database …\n"],["destroy","EventsController","classes/EventsController.html#method-i-destroy","()","<p>Find and destroy an event. Redirect to events#index. PRE: The event with\nthe specific id exists POST: …\n"],["edit","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-edit","()","<p>Redirects to a page to edit an availability PRE: The availability exists\nPOST: None\n"],["edit","EventsController","classes/EventsController.html#method-i-edit","()","<p>Find event object to update and store possible_times in a var. PRE: None\nPOST: None\n"],["ensure_times_allowed_has_correct_date","Event","classes/Event.html#method-i-ensure_times_allowed_has_correct_date","()","<p>When we created the times, we used today to generate the intervals.  This\nchanges the date of the datetime …\n"],["event_params","EventsController","classes/EventsController.html#method-i-event_params","()","<p>Define the permitted params for creating a new event PRE: None POST: None\n"],["hour_12","DateTime","classes/DateTime.html#method-i-hour_12","()","<p>PRE: None POST: None\n"],["hour_24","DateTime","classes/DateTime.html#method-i-hour_24","()","<p>PRE: None POST: None\n"],["index","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-index","()","<p>Simply redirects back to home page. Required since refreshing after a\nfailed validation will bring you …\n"],["index","EventsController","classes/EventsController.html#method-i-index","()","<p>Create an instance var of all of the events for use in the events#index\npage PRE: None POST: None\n"],["is_available_at_event_and_time?","User","classes/User.html#method-i-is_available_at_event_and_time-3F","(event,time)","<p>Check to see if a user said they were available for a specified event at a\nspecified time. PRE: None …\n"],["must_choose_at_least_one_time","Availability","classes/Availability.html#method-i-must_choose_at_least_one_time","()","<p>Make sure at least one available time is selected. PRE: times_available\nexists POST: if times_available …\n"],["must_choose_at_least_one_time","Event","classes/Event.html#method-i-must_choose_at_least_one_time","()","<p>Ensures that at least one time is chosen for the event PRE: times_allowed\nexists POST: If times_allowed …\n"],["name_cannot_be_empty","Event","classes/Event.html#method-i-name_cannot_be_empty","()","<p>Ensures the name field is not empty PRE: name exists POST: If name is\nblank, add an error to errors hash. …\n"],["new","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-new","()","<p>Redirects to a page for creation of an availability PRE: None POST: None\n"],["new","EventsController","classes/EventsController.html#method-i-new","()","<p>Create an instance var for a new event for the events#new pages PRE: None\nPOST: An event object is created …\n"],["reformat_time","ApplicationController","classes/ApplicationController.html#method-i-reformat_time","()","<p>Toggle the hour format to the opposite of what it was, then reload current\npage. PRE: None POST: Time …\n"],["show","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-show","()","<p>Redirects to a page showing the availability PRE: None POST: None\n"],["show","EventsController","classes/EventsController.html#method-i-show","()","<p>Create an instance var of the event with the specified id for the\nevents#show page PRE: None POST: None …\n"],["system!","Object","classes/Object.html#method-i-system-21","(*args)",""],["update","AvailabilitiesController","classes/AvailabilitiesController.html#method-i-update","()","<p>Edits a given availability PRE: The availability exists POST: Changes are\nmade to the availability in …\n"],["update","EventsController","classes/EventsController.html#method-i-update","()","<p>Define what to do when trying to update an event. PRE: The event with the\nspecific id exists POST: Event …\n"],["Gemfile","","files/Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p>git_source(:github) do |repo_name|\n\n<pre><code>repo_name = &quot;#{repo_name}/#{repo_name}&quot; ...</code></pre>\n"],["Gemfile.lock","","files/Gemfile_lock.html","","<p>GEM\n\n<pre><code>remote: https://rubygems.org/\nspecs:\n  actioncable (5.1.4)\n    actionpack (= 5.1.4)\n    nio4r (~&gt; ...</code></pre>\n"],["README","","files/README_md.html","","<p>Skeddit\n<p>Skeddit is a modular event planner and scheduler created in Ruby on Rails.\nIts simplistic design …\n"],["Rakefile","","files/Rakefile.html","","<p># Add your own tasks in files placed in lib/tasks ending in .rake, # for\nexample lib/tasks/capistrano.rake …\n"],["manifest.js","","files/app/assets/config/manifest_js.html","","<p>//= link_tree ../images //= link_directory ../javascripts .js //=\nlink_directory ../stylesheets .css …\n"],["application.js","","files/app/assets/javascripts/application_js.html","","<p>// This is a manifest file that&#39;ll be compiled into application.js,\nwhich will include all the files …\n"],["availabilities.coffee","","files/app/assets/javascripts/availabilities_coffee.html","","<p>Place all the behaviors and hooks related to the matching controller here.\nAll this logic will automatically …\n"],["cable.js","","files/app/assets/javascripts/cable_js.html","","<p>// Action Cable provides the framework to deal with WebSockets in Rails. //\nYou can generate new channels …\n"],["events.coffee","","files/app/assets/javascripts/events_coffee.html","","<p>Place all the behaviors and hooks related to the matching controller here.\nAll this logic will automatically …\n"],["application.scss","","files/app/assets/stylesheets/application_scss.html","","\n<pre><code> This is a manifest file that&#39;ll be compiled into application.css, which will include all the files\n ...</code></pre>\n"],["availabilities.scss","","files/app/assets/stylesheets/availabilities_scss.html","","<p>// Place all the styles related to the Availabilities controller here. //\nThey will automatically be …\n"],["events.scss","","files/app/assets/stylesheets/events_scss.html","","<p>// Place all the styles related to the Event controller here. // They will\nautomatically be included …\n"],["config.ru","","files/config_ru.html","","<p># This file is used by Rack-based servers to start the application.\n<p>require_relative &#39;config/environment&#39; …\n"],["development.log","","files/log/development_log.html","","<p>Started POST “/events” for 127.0.0.1 at 2017-09-17 17:01:48 -0500\nProcessing by EventsController#create …\n"],["package.json","","files/package_json.html","","<p>{\n\n<pre><code>&quot;name&quot;: &quot;Skeddit&quot;,\n&quot;private&quot;: true,\n&quot;dependencies&quot;: {}</code></pre>\n<p>}\n"],["404.html","","files/public/404_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;\n\n<pre><code>&lt;title&gt;The page you were looking for doesn&#39;t exist (404)&lt;/title&gt; ...</code></pre>\n"],["422.html","","files/public/422_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;\n\n<pre><code>&lt;title&gt;The change you wanted was rejected (422)&lt;/title&gt; ...</code></pre>\n"],["500.html","","files/public/500_html.html","","<p>&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt;\n\n<pre><code>&lt;title&gt;We&#39;re sorry, but something went wrong (500)&lt;/title&gt; ...</code></pre>\n"],["apple-touch-icon-precomposed.png","","files/public/apple-touch-icon-precomposed_png.html","",""],["apple-touch-icon.png","","files/public/apple-touch-icon_png.html","",""],["robots","","files/public/robots_txt.html","","<p>See www.robotstxt.org/robotstxt.html for documentation on how to use the\nrobots.txt file\n"],["server.pid","","files/tmp/pids/server_pid.html","","<p>26579\n"],["restart","","files/tmp/restart_txt.html","",""]]}}